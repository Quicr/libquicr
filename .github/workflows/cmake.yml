name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: jidicula/clang-format-action@v4.13.0
        with:
          clang-format-version: '18'
          exclude-regex: '(dependencies)'

  build:
    strategy:
      matrix:
        os: [  macos-latest, ubuntu-22.04, ubuntu-22.04-arm ]

    runs-on: ${{ matrix.os }}
    continue-on-error: true
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Packages (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install llvm go
        ln -s "$(brew --prefix llvm)/bin/clang-tidy" "/usr/local/bin/clang-tidy"
        brew install google-benchmark

    - name: Install Packages (Ubuntu)
      if: matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-22.04-arm'
      run: |
        sudo apt-get install -y clang-tidy-15

    - name: Configure GCC 12 (Ubuntu)
      if: matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-22.04-arm'
      run: |
        echo "CC=/usr/bin/gcc-12" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-12" >> $GITHUB_ENV

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DLINT=ON -DCMAKE_POLICY_VERSION_MINIMUM=3.5 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTING=ON -Dquicr_BUILD_BENCHMARKS=ON -Dquicr_BUILD_EXAMPLES=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j $(getconf _NPROCESSORS_ONLN)

    - name: Cache Build Output
      uses: actions/cache@v4
      with:
        path: ${{github.workspace}}/build
        key: ${{matrix.os}}-build-${{github.sha}}

  test:
    needs: build
    strategy:
      matrix:
        os: [  macos-latest, ubuntu-22.04, ubuntu-22.04-arm ]

    runs-on: ${{ matrix.os }}
    continue-on-error: true
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Restore build output cache
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/build
          key: ${{matrix.os}}-build-${{github.sha}}

      - name: Generate Certificates
        run: make cert

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

  benchmark:
    needs: build
    strategy:
      matrix:
        os: [  macos-latest, ubuntu-22.04, ubuntu-22.04-arm ]

    runs-on: ${{ matrix.os }}
    continue-on-error: true
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Restore build output cache
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/build
          key: ${{matrix.os}}-build-${{github.sha}}

      - name: Benchmark
        run: ${{github.workspace}}/build/benchmark/quicr_benchmark

  cleanup_cache:
    needs: [test, benchmark]
    strategy:
      matrix:
        os: [  macos-latest, ubuntu-22.04, ubuntu-22.04-arm ]

    runs-on: ${{ matrix.os }}
    continue-on-error: true
    timeout-minutes: 10
    env:
      GH_TOKEN: ${{ github.token }}
      GH_REPO: ${{ github.repository }}

    if: always() # Run even if previous jobs failed
    steps:
      - name: Delete Cache
        run: |
          gh cache delete ${{matrix.os}}-build-${{github.sha}}
