
    /*
     * {{message.name}}
     */
    Bytes& operator<<(Bytes& buffer, const {{message.name}}& msg)
    {
        Bytes payload;

        // fill out payload
        {% for field in message.fields %}
            {% if field.name != "type" and field.name != "length" %}
                {% if field.is_repeated %}
                    {% set repeated = "..." %}
                {% endif %}
        payload << msg.{{field.name}}; // ({{field.spec_type}}) {{repeated}} << {{field.cpp_using_name}}
            {% endif %}
        {% endfor %}

        // fill out buffer
        buffer << static_cast<std::uint64_t>(ControlMessageType::k{{message.message_type}});
        buffer << payload;
        return buffer;
    }

    BytesSpan operator>>(BytesSpan buffer, {{message.name}}& msg)
    {
        {% for field in message.fields %}
            {% if field.name != "type" and field.name != "length" %}
                {% if field.is_repeated %}
                    {% set repeated = "..." %}
                {% endif %}
                {% if field.is_optional %}
        if (msg.optional_{{field.name}}_cb) { msg.optional_{{field.name}}_cb(msg); }
        buffer = buffer >> msg.{{field.name}}; // ({{field.spec_type}}) {{repeated}} >> {{field.cpp_using_name}}
                {% else %}
        buffer = buffer >> msg.{{field.name}}; // ({{field.spec_type}}) {{repeated}} >> {{field.cpp_using_name}}
                {% endif %}
            {% endif %}
        {% endfor %}
        return buffer;
    }

    {% for group_name in message.optional_groups %}
    Bytes& operator<<(Bytes& buffer, const std::optional<{{message.name}}::{{group_name}}>& grp)
    {
        if (grp.has_value()) {
        {% for field in message.optional_groups[group_name] %}
            buffer << grp->{{field.name}}; // ({{field.spec_type}}) << {{field.cpp_using_name}}
        {% endfor %}
        }
        return buffer;
    }

    BytesSpan operator>>(BytesSpan buffer, std::optional<{{message.name}}::{{group_name}}>& grp)
    {
        if (grp.has_value()) {
        {% for field in message.optional_groups[group_name] %}
            buffer = buffer >> grp->{{field.name}}; // ({{field.spec_type}}) >> {{field.cpp_using_name}}
        {% endfor %}
        }
        return buffer;
    }    
{% endfor %}