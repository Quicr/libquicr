    {% set ns = namespace(count=message.optional_groups|length ) %}
    {% if ns.count > 0 %}
    /*
     * {{message.name}} stream in constructor
     */
    {{message.name}}::{{message.name}}(
        {%for field in message.fields %}
            {% if field.spec_name not in field_discards %}
                {% if field.is_optional %}
                {% set ns.count = ns.count - 1 %}
            std::function<void ({{message.name}}&)> {{field.name}}_cb{{"," if ns.count > 0 }}
                {% endif %}
            {% endif %}
        {% endfor %}
        ){{ ":" if message.optional_groups|length > 0 }}
        {% set ns.count = message.optional_groups|length %}
        {%for field in message.fields %}
            {% if field.spec_name not in field_discards %}
                {% if field.is_optional %}
                    {% set ns.count = ns.count - 1 %}
            {{field.name}}_cb({{field.name}}_cb){{"," if ns.count > 0 }}
                {% endif %}
            {% endif %}
        {% endfor %}
    {
    }
    {% endif %}

    /*
     * {{message.name}} stream in
     */
    BytesSpan operator>>(BytesSpan buffer, {{message.name}}& msg)
    {
        {% for field in message.fields %}
            {% if field.spec_name not in field_discards %}
                {% if field.is_repeated %}
                    {% set repeated = "..." %}
                {% endif %}
                {% if field.is_optional %}
        if (msg.{{field.name}}_cb) { msg.{{field.name}}_cb(msg); }
        buffer = buffer >> msg.{{field.name}}; // ({{field.spec_type}}) {{repeated}} >> {{field.cpp_using_name}}
                {% else %}
        buffer = buffer >> msg.{{field.name}}; // ({{field.spec_type}}) {{repeated}} >> {{field.cpp_using_name}}
                {% endif %}
            {% endif %}
        {% endfor %}
        return buffer;
    }

    /*
     * {{message.name}} stream out
     */
    Bytes& operator<<(Bytes& buffer, const {{message.name}}& msg)
    {
        Bytes payload;
        // fill out payload
        {% for field in message.fields %}
            {% if field.spec_name not in field_discards %}
                {% if field.is_repeated %}
                    {% set repeated = "..." %}
                {% endif %}
                {% if field.is_variable_length %}
                {% endif %}
        payload << msg.{{field.name}}; // ({{field.spec_type}}) {{repeated}} << {{field.cpp_using_name}}
            {% endif %}
        {% endfor %}

        // fill out buffer
        buffer << static_cast<std::uint64_t>(ControlMessageType::k{{message.message_type}});
        buffer << payload;
        return buffer;
    }

    {% for group_name in message.optional_groups %}
    BytesSpan operator>>(BytesSpan buffer, std::optional<{{message.name}}::{{group_name}}>& grp)
    {
        if (grp.has_value()) {
        {% for field in message.optional_groups[group_name] %}
            buffer = buffer >> grp->{{field.name}}; // ({{field.spec_type}}) >> {{field.cpp_using_name}}
        {% endfor %}
        }
        return buffer;
    }  

    Bytes& operator<<(Bytes& buffer, const std::optional<{{message.name}}::{{group_name}}>& grp)
    {
        if (grp.has_value()) {
        {% for field in message.optional_groups[group_name] %}
            buffer << grp->{{field.name}}; // ({{field.spec_type}}) << {{field.cpp_using_name}}
        {% endfor %}
        }
        return buffer;
    }
    {% endfor %}