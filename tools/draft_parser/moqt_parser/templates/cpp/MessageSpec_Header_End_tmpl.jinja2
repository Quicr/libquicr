{% set unique_types = [] %}
{% for key in using_map if using_map[key].cpp_using_type not in unique_types %}
    {% if using_map[key].is_repeated %}
    {{ unique_types.append(using_map[key].cpp_using_type) or "" }}
    {% endif %}
{% endfor %}
{% for utype in unique_types %}
    Bytes& operator<<(Bytes& buffer, const {{utype}}& vec);
    BytesSpan operator>>(BytesSpan buffer, {{utype}}& vec);

{% endfor %}

     /**
     * @brief Subscribe attributes
     */
    struct SubscribeAttributes
    {
        uint8_t priority;           ///< Subscriber priority
        GroupOrder group_order; ///< Subscriber group order
    };

    /**
     * @brief Fetch attributes
     */
    struct FetchAttributes
    {
        uint8_t priority;         ///< Fetch priority
        GroupOrder group_order;   ///< Fetch group order
        StartGroup start_group;   ///< Fetch starting group in range
        StartObject start_object; ///< Fetch starting object in group
        EndGroup end_group;       ///< Fetch final group in range
        std::optional<EndObject> end_object;     ///< Fetch final object in group
    };

    Bytes& operator<<(Bytes& buffer, ControlMessageType message_type);
    BytesSpan operator>>(BytesSpan buffer, TrackNamespace& msg);
    Bytes& operator<<(Bytes& buffer, const TrackNamespace& msg);

    BytesSpan operator>>(BytesSpan buffer, Parameter& msg);
    Bytes& operator<<(Bytes& buffer, const Parameter& msg);    

} // namespace
